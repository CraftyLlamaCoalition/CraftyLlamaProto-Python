# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import CriaNotesService_pb2 as CriaNotesService__pb2


class CriaNotesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddNote = channel.unary_unary(
                '/crianotes.CriaNotesService/AddNote',
                request_serializer=CriaNotesService__pb2.NewNoteRequest.SerializeToString,
                response_deserializer=CriaNotesService__pb2.Status.FromString,
                )
        self.DeleteNote = channel.unary_unary(
                '/crianotes.CriaNotesService/DeleteNote',
                request_serializer=CriaNotesService__pb2.NoteRequest.SerializeToString,
                response_deserializer=CriaNotesService__pb2.Status.FromString,
                )
        self.GetNote = channel.unary_unary(
                '/crianotes.CriaNotesService/GetNote',
                request_serializer=CriaNotesService__pb2.NoteRequest.SerializeToString,
                response_deserializer=CriaNotesService__pb2.NoteContent.FromString,
                )
        self.GetAllNotes = channel.unary_unary(
                '/crianotes.CriaNotesService/GetAllNotes',
                request_serializer=CriaNotesService__pb2.User.SerializeToString,
                response_deserializer=CriaNotesService__pb2.MultipleNotes.FromString,
                )


class CriaNotesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllNotes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CriaNotesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddNote': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNote,
                    request_deserializer=CriaNotesService__pb2.NewNoteRequest.FromString,
                    response_serializer=CriaNotesService__pb2.Status.SerializeToString,
            ),
            'DeleteNote': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteNote,
                    request_deserializer=CriaNotesService__pb2.NoteRequest.FromString,
                    response_serializer=CriaNotesService__pb2.Status.SerializeToString,
            ),
            'GetNote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNote,
                    request_deserializer=CriaNotesService__pb2.NoteRequest.FromString,
                    response_serializer=CriaNotesService__pb2.NoteContent.SerializeToString,
            ),
            'GetAllNotes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllNotes,
                    request_deserializer=CriaNotesService__pb2.User.FromString,
                    response_serializer=CriaNotesService__pb2.MultipleNotes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'crianotes.CriaNotesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CriaNotesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crianotes.CriaNotesService/AddNote',
            CriaNotesService__pb2.NewNoteRequest.SerializeToString,
            CriaNotesService__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crianotes.CriaNotesService/DeleteNote',
            CriaNotesService__pb2.NoteRequest.SerializeToString,
            CriaNotesService__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crianotes.CriaNotesService/GetNote',
            CriaNotesService__pb2.NoteRequest.SerializeToString,
            CriaNotesService__pb2.NoteContent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllNotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crianotes.CriaNotesService/GetAllNotes',
            CriaNotesService__pb2.User.SerializeToString,
            CriaNotesService__pb2.MultipleNotes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
